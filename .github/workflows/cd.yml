name: Node CI

on: 
  push:
    branches-ignore:
      - master

jobs:
  deploy:
  
    runs-on: ubuntu-latest
    
    steps:
      - name: checkout
        uses: actions/checkout@v1
      - name: npm install and build webpack
        run: |
          npm install
          npm run build
      - name: configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
            aws-region: ap-south-1
        
      - name: Login to Amazon ECR
        id  : login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to amazon ecr
        id: deploy-ecr
        env:
          ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
          ECR_REPOSITORY: dev-ecr_repo
          IMAGE_TAG:  ${{github.sha}} 
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      - name: Fill in new image id in the amzon ecs task definition.
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task=defintion: first-run-task-definition.json
          container-name: sample-app
          image:  ${{steps.deploy-ecr.outputs.image}}
      - name: Deploy Amazon ECS task definition.
        id: deploy-task
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: sample-app-service
            cluster: demo-cluster
            wait-for-service-stability: true
      